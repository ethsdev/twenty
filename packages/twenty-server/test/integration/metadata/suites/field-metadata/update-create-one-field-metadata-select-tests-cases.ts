import { EachTestingContext } from 'twenty-shared/testing';
import { v4 } from 'uuid';

import { FieldMetadataComplexOption } from 'src/engine/metadata-modules/field-metadata/dtos/options.input';

type TestCase = EachTestingContext<{
  options: FieldMetadataComplexOption[];
  expectedOptions?: FieldMetadataComplexOption[];
}>;
const successfulTestCases: TestCase[] = [
  {
    title: 'It should create option with provided id',
    context: {
      options: [
        {
          label: 'Option 1',
          value: 'OPTION_1',
          color: 'green',
          position: 1,
          id: '26c602c3-cba9-4d83-92d4-4ba7dbae2f31',
        },
      ],
    },
  },
  {
    title: 'It should create option with various options id',
    context: {
      options: Array.from({ length: 42 }, (_value, index) => {
        const optionWithoutId: FieldMetadataComplexOption = {
          label: `Option ${index}`,
          value: `OPTION_${index}`,
          color: 'green',
          position: index,
        };

        if (index % 2 === 0) {
          return {
            ...optionWithoutId,
            id: v4(),
          };
        }

        return optionWithoutId;
      }),
    },
  },
  {
    title: 'It should create option even if no id is provided',
    context: {
      options: [
        {
          label: 'Option 1',
          value: 'OPTION_1',
          color: 'green',
          position: 1,
        },
      ],
    },
  },
  {
    title: 'It should trim and create option',
    context: {
      options: [
        {
          label: '       Option        1       ',
          value: '        OPTION_1        ',
          color: 'green',
          position: 1,
        },
      ],
      expectedOptions: [
        {
          label: 'Option 1',
          value: 'OPTION_1',
          color: 'green',
          position: 1,
        },
      ],
    },
  },
];

const basicFailingStringEdgeCaseInputs: {
  label: string;
  input: string | undefined | number | null;
}[] = [
  { input: '          ', label: 'only white spaces' },
  { input: '', label: 'empty string' },
  { input: null, label: 'null' },
  { input: 22222, label: 'not a string' },
  { input: 'a'.repeat(64), label: 'too long' },
];

const stringFields: (keyof FieldMetadataComplexOption)[] = [
  'id',
  'label',
  'value',
];
const autoGeneratedStringFailingTestsCases: TestCase[] = stringFields.flatMap(
  (field) => {
    return basicFailingStringEdgeCaseInputs.map<TestCase>(
      ({ input, label }) => ({
        title: `It should fail to create a field metadata with an option having: ${label} ${field} `,
        context: {
          options: [
            {
              label: 'Option 1',
              value: 'OPTION_1',
              color: 'green',
              position: 1,
              [field]: input,
            },
          ],
        },
      }),
    );
  },
);
const failingTestCases: TestCase[] = [
  ...autoGeneratedStringFailingTestsCases,
  {
    title: 'It should fail to create option with invalid id',
    context: {
      options: [
        {
          label: 'Option 1',
          value: 'OPTION_1',
          color: 'green',
          position: 1,
          id: 'not a uuid',
        },
      ],
    },
  },
  {
    title: 'It should fail to create field metadata with null options',
    context: {
      options: null as unknown as FieldMetadataComplexOption[],
    },
  },
  {
    title: 'It should fail to create field metadata with undefined options',
    context: {
      options: undefined as unknown as FieldMetadataComplexOption[],
    },
  },
  {
    title: 'It should fail to create field metadata with empty options',
    context: {
      options: [],
    },
  },
  {
    title:
      'It should fail to create field metadata with an option value that do not follow UPPER_CASE and snake_case',
    context: {
      options: [
        {
          label: 'Option 1',
          value: 'Option 1 and some other things, /',
          color: 'green',
          position: 1,
        },
      ],
    },
  },
  {
    title:
      'It should fail to create field metadata with an option label that contains a comma',
    context: {
      options: [
        {
          label: 'Option ,1',
          value: 'OPTION_1',
          color: 'green',
          position: 1,
        },
      ],
    },
  },
  {
    title:
      'It should fail to create field metadata with options having duplicated values',
    context: {
      options: [
        {
          label: 'Option 1',
          value: 'OPTION_1',
          color: 'green',
          position: 0,
        },
        {
          label: 'Option 1',
          value: 'OPTION_1',
          color: 'green',
          position: 1,
        },
      ],
    },
  },

  {
    title: 'It should fail to create two options with the same id',
    context: {
      options: [
        {
          label: 'Option 1',
          value: 'OPTION_1',
          color: 'green',
          position: 1,
          id: 'fd1f11fd-3f05-4a33-bddf-800c3412ce98',
        },
        {
          label: 'Option 2',
          value: 'OPTION_2',
          color: 'green',
          position: 2,
          id: 'fd1f11fd-3f05-4a33-bddf-800c3412ce98',
        },
      ],
    },
  },
  {
    title: 'It should fail to create two options with the same position',
    context: {
      options: [
        {
          label: 'Option 1',
          value: 'OPTION_1',
          color: 'green',
          position: 1,
        },
        {
          label: 'Option 2',
          value: 'OPTION_2',
          color: 'green',
          position: 1,
        },
      ],
    },
  },
  {
    title: 'It should fail to create duplicated trimmed options values',
    context: {
      options: [
        {
          label: 'Option 1',
          value: '         OPTION_1                   ',
          color: 'green',
          position: 1,
        },
        {
          label: 'Option 2',
          value: '   OPTION_1        ',
          color: 'green',
          position: 2,
        },
      ],
    },
  },
  {
    title:
      'It should fail to create a field metada with an undefined option label',
    context: {
      options: [
        {
          label: undefined as unknown as string,
          value: 'OPTION_1',
          color: 'green',
          position: 1,
        },
      ],
    },
  },
  {
    title:
      'It should fail to create a field metada with an undefined option value',
    context: {
      options: [
        {
          label: 'Option 1',
          value: undefined as unknown as string,
          color: 'green',
          position: 1,
        },
      ],
    },
  },
];

export const UPDATE_CREATE_ONE_FIELD_METADATA_SELECT_TEST_CASES = {
  successfulTestCases,
  failingTestCases,
};
